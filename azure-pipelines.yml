# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - master

pool:
  vmImage: "ubuntu-latest"

steps:
- task: NodeTool@0
  inputs:
    versionSpec: "10.x"
  displayName: "Install Node.js"

- task: Npm@1
  inputs:
    command: 'install'
  displayName: "Install dependencies"

- task: Npm@1
  inputs:
    command: 'custom'
    customCommand: 'run build'
  displayName: "Build from source"

- task: Npm@1
  inputs:
    command: 'custom'
    customCommand: 'run coverage'
  displayName: "Run tests and coverage"

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '.nyc/mocha-report.xml'
  displayName: "Publish test results"

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '.nyc/coverage/cobertura-coverage.xml'
  displayName: "Publish code coverage"

- task: Npm@1
  inputs:
    command: 'custom'
    customCommand: 'pack'
  displayName: "Package source files"

- task: CopyFiles@2
  inputs:
    sourceFolder: "$(Build.SourcesDirectory)"
    contents: "*.tgz"
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: "Copy npm package"

- task: CopyFiles@2
  inputs:
    sourceFolder: "$(Build.SourcesDirectory)"
    contents: "package.json"
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: "Copy package.json"

- task: CopyFiles@2
  inputs:
    sourceFolder: "$(Build.SourcesDirectory)"
    contents: "RELEASE_NOTES.md"
    targetFolder: $(Build.ArtifactStagingDirectory)/release
  displayName: "Copy release notes"

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      verlte() {
          [ "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
      }
      
      LATEST_VERSION=$(npm show @dynatrace/zakzak version)
      PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
      
      echo "Latest version is $LATEST_VERSION"
      echo "Package version is $PACKAGE_VERSION"
      
      LTE=$(verlte $PACKAGE_VERSION $LATEST_VERSION && echo "NOT_NEW" || echo "NEW")
      
      if [ "$LTE" == "NEW" ]
      then
      	echo "new version"
      	echo "##vso[build.addbuildtag]release"
      else
      	echo "no new version"
      fi
  displayName: "Check version change"

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
    artifactName: npm
  displayName: 'Publish npm artifact'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/release'
    artifactName: release
  displayName: 'Publish release notes'
